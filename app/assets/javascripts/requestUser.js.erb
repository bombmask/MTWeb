$(document).ready(function () {
	if (!location.pathname.startsWith("/app/")) {
		return
	}
	//Only copy on clipboard buttons
	var clipboard = new Clipboard('#ClipboardButton');

	$("#data-table").on('click', '> *', share_row);

	// Info
	clipboard.on('success', function (e) {
		console.info('Action:', e.action);
		console.info('Text:', e.text);
		console.info('Trigger:', e.trigger);

		e.clearSelection();
	});

	clipboard.on('error', function (e) {
		console.error('Action:', e.action);
		console.error('Trigger:', e.trigger);
	});

	var params = location.search.slice(1).split("&")
	var hash = location.hash

	for (var i = 0; i < params.length; i++) {
		if (params[i].startsWith("user=")) {
			user = params[i].split('=')[1];
			$("#search-text").val(user);
			GetUser(user);
			break;
		}
	}

});

$(function () {
	window.request_user = function () {
		user = $("#search-text").val()

		console.log(user)
		GetUser(user);
	}
});

function GetUser(user) {
	clean_table();
	clean_header();
	update_progress(100, "Fetching User", "!");

	if (!user || user === "") {
		update_progress(100, "No Username Supplied", "progress-bar-danger");
		return;
	};
	user = user.replace(/\s+/g, '');


	$.ajax({
		url: "https://bot.themaskoftruth.com:8443/api/users"
		, type: "GET"
		, data: "&user=" + user
		, success: function (result, status, xhr) {
			sessionStorage.UserData = (result, status, xhr);
			RecieveData(result, status, xhr);
			ScrollIfRequested();
		}
		, error: function (response) {
			update_progress(100, "Error retriveing user (Status: " + response.status + ")", "progress-bar-danger")
		}
	});
};

function ScrollIfRequested() {
	if (!location.hash) {
		console.log("Scroll not requested");
		return false;
	}

	$("html, body").animate({
		scrollTop: $(location.hash).parent().offset().top - $(location.hash).parent().height()*2
	}, 2000);
	console.log("Scroll animated");

	$(location.hash).effect("highlight", {
		color: "#0022CC"
	}, 12000);
	console.log("Highlighted");
}

function RecieveData(result, status, xhr) {
	userData = xhr.responseJSON;

	update_header(userData.username);
	table_header();
	DisplayData(userData);
	update_progress(100, "Success", "progress-bar-success");

};

function reverse_data() {

	DisplayDataReversed(userData);
};

function DisplayData(data) {
	this.data = data;

	for (var i = 0; i < this.data.messages.length; i++) {
		var currentMessage = this.data.messages[i];
		currentMessage.time = new Date(currentMessage.time).toString();

		var TString = currentMessage.time.split(' ');
		TString = TString.slice(0,3).concat(TString[4]).join(' ');


		if (currentMessage.type === "message") {
			if (currentMessage.channel[0] != "#") {
				add_row(TString, "Whispered: " + currentMessage.channel, currentMessage.message, "warning", "M" + i);
			} else {
				add_row(TString, currentMessage.channel, currentMessage.message, null, "M" + i);
			}
		} else if (currentMessage.type === "ban") {
			add_row(TString, currentMessage.channel, "Was Banned or Timed Out", "danger", "M" + i);
		}
		var progress = "Parsing Messages ( " + i + "/" + this.data.messages.length + " )"
		update_progress((i / this.data.messages.length) * 100, progress, "progress-bar-info");
	}
};

function update_progress(percentage, new_text, style) {
	var bar = $("#request-progress");
	bar.attr("style", "mid-width: 2em; width: " + percentage + "%;");
	bar.attr("aria-valuenow", percentage + "%");

	if (new_text != undefined) {
		bar.text(new_text);
	};

	if (style != undefined) {
		// If nothing changed finish DOM changes and return
		if (this.lastStyle === style) {
			return;
		} else {
			this.lastStyle = style;
		}

		var secondClass = bar.attr("class").split(' ');
		if (secondClass.length >= 2) {
			bar.attr("class", secondClass[0]);
			//for (var i = 1; i < secondClass.length; i ++){bar.removeClass(secondClass[i]);}
		};

		bar.addClass(style);
	};
};

function update_header(heading) {
	var header = $("#results-header");
	header.text("User: " + heading);

};

function table_header(time, channel, message, classes) {
	// Defaults
	if (!time) {
		time = "Time";
	}
	if (!channel) {
		channel = "Channel";
	}
	if (!message) {
		message = "Message";
	}
	if (!classes) {
		classes = ""
	}
	add_row(time, channel, message, classes);
};

function add_row(time, channel, message, classes, ID) {
	var table = $("#data-table");

	if (!classes) {
		classes = "";
	}
	classes += "";
	var shareButtonString = (ID === undefined? "<td/>": "<td class=\"td-button\"><button id=\"" + ID + "\" class=\"btn btn-info btn-xs btn-mt-share\">S</button></td> ");
	table.append(
		"<tr class=\"" + classes + "\" >" +
		"<td class=\"col-md-2\">" + time + "</td>" +
		"<td class=\"col-md-1\">" + channel + "</td>" +
		"<td class=\"col-md-push-8 wrap-text-hard\">" + message + "</td>" +
		shareButtonString+
		"</tr>");
};

function add_custom_row(string) {
	var table = $("#data-table");
	table.append(string);
}

function clean_table() {
	// apperently this is faster
	var table = $("#data-table");
	table.empty();

}

function clean_header(text) {
	var header = $("#results-header")
	header.text("")
	if (text) {
		header.text(text)
	}
}

function share_row(id) {
	if(!(id.target && id.target.nodeName == "BUTTON")){
		return;
	}

	var shareLink = location.origin + "/app/share?user=" + user + "#" + id.target.id;

	bootbox.dialog({
		title: "Share"
		, onEscape: function() {}
		, backdrop: true
		, message: "<div class=\"input-group\">" +
			"<input value=\"" + shareLink + "\" id=\"shareLink\" class=\"form-control\" placeholder=\"Username\" type=\"text\">" +
			"<span class=\"input-group-btn\">" +
			"<button data-clipboard-target=\"#shareLink\" id=\"ClipboardButton\"class=\"btn \" aria-label=\"Copied!\">"+
				"<img class=\"clippy\" src=\"<%= asset_path('clippy.svg') %>\" width=\"14\" alt=\"Copy to clipboard\">"+
			"</button>" +
			"</span>" +
			"</div>"
	, })
}
